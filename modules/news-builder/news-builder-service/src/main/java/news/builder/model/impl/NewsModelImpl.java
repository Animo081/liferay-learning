/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package news.builder.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import news.builder.model.News;
import news.builder.model.NewsModel;
import news.builder.model.NewsSoap;

/**
 * The base model implementation for the News service. Represents a row in the &quot;News_News&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>NewsModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link NewsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see NewsImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class NewsModelImpl extends BaseModelImpl<News> implements NewsModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a news model instance should use the <code>News</code> interface instead.
	 */
	public static final String TABLE_NAME = "News_News";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"newsId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"title", Types.VARCHAR}, {"subtitle", Types.VARCHAR},
		{"urlTitle", Types.VARCHAR}, {"description", Types.VARCHAR},
		{"content", Types.VARCHAR}, {"displayDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("newsId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("subtitle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("urlTitle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("content", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("displayDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table News_News (uuid_ VARCHAR(75) null,newsId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,title VARCHAR(75) null,subtitle VARCHAR(75) null,urlTitle VARCHAR(75) null,description VARCHAR(75) null,content VARCHAR(75) null,displayDate DATE null)";

	public static final String TABLE_SQL_DROP = "drop table News_News";

	public static final String ORDER_BY_JPQL =
		" ORDER BY news.displayDate DESC, news.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY News_News.displayDate DESC, News_News.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		news.builder.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.news.builder.model.News"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		news.builder.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.news.builder.model.News"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		news.builder.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.news.builder.model.News"),
		true);

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long GROUPID_COLUMN_BITMASK = 2L;

	public static final long UUID_COLUMN_BITMASK = 4L;

	public static final long DISPLAYDATE_COLUMN_BITMASK = 8L;

	public static final long CREATEDATE_COLUMN_BITMASK = 16L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static News toModel(NewsSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		News model = new NewsImpl();

		model.setUuid(soapModel.getUuid());
		model.setNewsId(soapModel.getNewsId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setTitle(soapModel.getTitle());
		model.setSubtitle(soapModel.getSubtitle());
		model.setUrlTitle(soapModel.getUrlTitle());
		model.setDescription(soapModel.getDescription());
		model.setContent(soapModel.getContent());
		model.setDisplayDate(soapModel.getDisplayDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<News> toModels(NewsSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<News> models = new ArrayList<News>(soapModels.length);

		for (NewsSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		news.builder.service.util.ServiceProps.get(
			"lock.expiration.time.news.builder.model.News"));

	public NewsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _newsId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setNewsId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _newsId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return News.class;
	}

	@Override
	public String getModelClassName() {
		return News.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<News, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<News, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<News, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((News)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<News, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<News, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((News)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<News, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<News, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, News>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			News.class.getClassLoader(), News.class, ModelWrapper.class);

		try {
			Constructor<News> constructor =
				(Constructor<News>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<News, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<News, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<News, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<News, Object>>();
		Map<String, BiConsumer<News, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<News, ?>>();

		attributeGetterFunctions.put(
			"uuid",
			new Function<News, Object>() {

				@Override
				public Object apply(News news) {
					return news.getUuid();
				}

			});
		attributeSetterBiConsumers.put(
			"uuid",
			new BiConsumer<News, Object>() {

				@Override
				public void accept(News news, Object uuid) {
					news.setUuid((String)uuid);
				}

			});
		attributeGetterFunctions.put(
			"newsId",
			new Function<News, Object>() {

				@Override
				public Object apply(News news) {
					return news.getNewsId();
				}

			});
		attributeSetterBiConsumers.put(
			"newsId",
			new BiConsumer<News, Object>() {

				@Override
				public void accept(News news, Object newsId) {
					news.setNewsId((Long)newsId);
				}

			});
		attributeGetterFunctions.put(
			"groupId",
			new Function<News, Object>() {

				@Override
				public Object apply(News news) {
					return news.getGroupId();
				}

			});
		attributeSetterBiConsumers.put(
			"groupId",
			new BiConsumer<News, Object>() {

				@Override
				public void accept(News news, Object groupId) {
					news.setGroupId((Long)groupId);
				}

			});
		attributeGetterFunctions.put(
			"companyId",
			new Function<News, Object>() {

				@Override
				public Object apply(News news) {
					return news.getCompanyId();
				}

			});
		attributeSetterBiConsumers.put(
			"companyId",
			new BiConsumer<News, Object>() {

				@Override
				public void accept(News news, Object companyId) {
					news.setCompanyId((Long)companyId);
				}

			});
		attributeGetterFunctions.put(
			"userId",
			new Function<News, Object>() {

				@Override
				public Object apply(News news) {
					return news.getUserId();
				}

			});
		attributeSetterBiConsumers.put(
			"userId",
			new BiConsumer<News, Object>() {

				@Override
				public void accept(News news, Object userId) {
					news.setUserId((Long)userId);
				}

			});
		attributeGetterFunctions.put(
			"userName",
			new Function<News, Object>() {

				@Override
				public Object apply(News news) {
					return news.getUserName();
				}

			});
		attributeSetterBiConsumers.put(
			"userName",
			new BiConsumer<News, Object>() {

				@Override
				public void accept(News news, Object userName) {
					news.setUserName((String)userName);
				}

			});
		attributeGetterFunctions.put(
			"createDate",
			new Function<News, Object>() {

				@Override
				public Object apply(News news) {
					return news.getCreateDate();
				}

			});
		attributeSetterBiConsumers.put(
			"createDate",
			new BiConsumer<News, Object>() {

				@Override
				public void accept(News news, Object createDate) {
					news.setCreateDate((Date)createDate);
				}

			});
		attributeGetterFunctions.put(
			"modifiedDate",
			new Function<News, Object>() {

				@Override
				public Object apply(News news) {
					return news.getModifiedDate();
				}

			});
		attributeSetterBiConsumers.put(
			"modifiedDate",
			new BiConsumer<News, Object>() {

				@Override
				public void accept(News news, Object modifiedDate) {
					news.setModifiedDate((Date)modifiedDate);
				}

			});
		attributeGetterFunctions.put(
			"title",
			new Function<News, Object>() {

				@Override
				public Object apply(News news) {
					return news.getTitle();
				}

			});
		attributeSetterBiConsumers.put(
			"title",
			new BiConsumer<News, Object>() {

				@Override
				public void accept(News news, Object title) {
					news.setTitle((String)title);
				}

			});
		attributeGetterFunctions.put(
			"subtitle",
			new Function<News, Object>() {

				@Override
				public Object apply(News news) {
					return news.getSubtitle();
				}

			});
		attributeSetterBiConsumers.put(
			"subtitle",
			new BiConsumer<News, Object>() {

				@Override
				public void accept(News news, Object subtitle) {
					news.setSubtitle((String)subtitle);
				}

			});
		attributeGetterFunctions.put(
			"urlTitle",
			new Function<News, Object>() {

				@Override
				public Object apply(News news) {
					return news.getUrlTitle();
				}

			});
		attributeSetterBiConsumers.put(
			"urlTitle",
			new BiConsumer<News, Object>() {

				@Override
				public void accept(News news, Object urlTitle) {
					news.setUrlTitle((String)urlTitle);
				}

			});
		attributeGetterFunctions.put(
			"description",
			new Function<News, Object>() {

				@Override
				public Object apply(News news) {
					return news.getDescription();
				}

			});
		attributeSetterBiConsumers.put(
			"description",
			new BiConsumer<News, Object>() {

				@Override
				public void accept(News news, Object description) {
					news.setDescription((String)description);
				}

			});
		attributeGetterFunctions.put(
			"content",
			new Function<News, Object>() {

				@Override
				public Object apply(News news) {
					return news.getContent();
				}

			});
		attributeSetterBiConsumers.put(
			"content",
			new BiConsumer<News, Object>() {

				@Override
				public void accept(News news, Object content) {
					news.setContent((String)content);
				}

			});
		attributeGetterFunctions.put(
			"displayDate",
			new Function<News, Object>() {

				@Override
				public Object apply(News news) {
					return news.getDisplayDate();
				}

			});
		attributeSetterBiConsumers.put(
			"displayDate",
			new BiConsumer<News, Object>() {

				@Override
				public void accept(News news, Object displayDate) {
					news.setDisplayDate((Date)displayDate);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getNewsId() {
		return _newsId;
	}

	@Override
	public void setNewsId(long newsId) {
		_newsId = newsId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return "";
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@JSON
	@Override
	public String getSubtitle() {
		if (_subtitle == null) {
			return "";
		}
		else {
			return _subtitle;
		}
	}

	@Override
	public void setSubtitle(String subtitle) {
		_subtitle = subtitle;
	}

	@JSON
	@Override
	public String getUrlTitle() {
		if (_urlTitle == null) {
			return "";
		}
		else {
			return _urlTitle;
		}
	}

	@Override
	public void setUrlTitle(String urlTitle) {
		_urlTitle = urlTitle;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	@Override
	public String getContent() {
		if (_content == null) {
			return "";
		}
		else {
			return _content;
		}
	}

	@Override
	public void setContent(String content) {
		_content = content;
	}

	@JSON
	@Override
	public Date getDisplayDate() {
		return _displayDate;
	}

	@Override
	public void setDisplayDate(Date displayDate) {
		_columnBitmask = -1L;

		_displayDate = displayDate;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(News.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), News.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public News toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = _escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		NewsImpl newsImpl = new NewsImpl();

		newsImpl.setUuid(getUuid());
		newsImpl.setNewsId(getNewsId());
		newsImpl.setGroupId(getGroupId());
		newsImpl.setCompanyId(getCompanyId());
		newsImpl.setUserId(getUserId());
		newsImpl.setUserName(getUserName());
		newsImpl.setCreateDate(getCreateDate());
		newsImpl.setModifiedDate(getModifiedDate());
		newsImpl.setTitle(getTitle());
		newsImpl.setSubtitle(getSubtitle());
		newsImpl.setUrlTitle(getUrlTitle());
		newsImpl.setDescription(getDescription());
		newsImpl.setContent(getContent());
		newsImpl.setDisplayDate(getDisplayDate());

		newsImpl.resetOriginalValues();

		return newsImpl;
	}

	@Override
	public int compareTo(News news) {
		int value = 0;

		value = DateUtil.compareTo(getDisplayDate(), news.getDisplayDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		value = DateUtil.compareTo(getCreateDate(), news.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof News)) {
			return false;
		}

		News news = (News)obj;

		long primaryKey = news.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		NewsModelImpl newsModelImpl = this;

		newsModelImpl._originalUuid = newsModelImpl._uuid;

		newsModelImpl._originalGroupId = newsModelImpl._groupId;

		newsModelImpl._setOriginalGroupId = false;

		newsModelImpl._originalCompanyId = newsModelImpl._companyId;

		newsModelImpl._setOriginalCompanyId = false;

		newsModelImpl._setModifiedDate = false;

		newsModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<News> toCacheModel() {
		NewsCacheModel newsCacheModel = new NewsCacheModel();

		newsCacheModel.uuid = getUuid();

		String uuid = newsCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			newsCacheModel.uuid = null;
		}

		newsCacheModel.newsId = getNewsId();

		newsCacheModel.groupId = getGroupId();

		newsCacheModel.companyId = getCompanyId();

		newsCacheModel.userId = getUserId();

		newsCacheModel.userName = getUserName();

		String userName = newsCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			newsCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			newsCacheModel.createDate = createDate.getTime();
		}
		else {
			newsCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			newsCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			newsCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		newsCacheModel.title = getTitle();

		String title = newsCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			newsCacheModel.title = null;
		}

		newsCacheModel.subtitle = getSubtitle();

		String subtitle = newsCacheModel.subtitle;

		if ((subtitle != null) && (subtitle.length() == 0)) {
			newsCacheModel.subtitle = null;
		}

		newsCacheModel.urlTitle = getUrlTitle();

		String urlTitle = newsCacheModel.urlTitle;

		if ((urlTitle != null) && (urlTitle.length() == 0)) {
			newsCacheModel.urlTitle = null;
		}

		newsCacheModel.description = getDescription();

		String description = newsCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			newsCacheModel.description = null;
		}

		newsCacheModel.content = getContent();

		String content = newsCacheModel.content;

		if ((content != null) && (content.length() == 0)) {
			newsCacheModel.content = null;
		}

		Date displayDate = getDisplayDate();

		if (displayDate != null) {
			newsCacheModel.displayDate = displayDate.getTime();
		}
		else {
			newsCacheModel.displayDate = Long.MIN_VALUE;
		}

		return newsCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<News, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<News, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<News, Object> attributeGetterFunction = entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((News)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<News, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<News, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<News, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((News)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final Function<InvocationHandler, News>
		_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	private String _uuid;
	private String _originalUuid;
	private long _newsId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _title;
	private String _subtitle;
	private String _urlTitle;
	private String _description;
	private String _content;
	private Date _displayDate;
	private long _columnBitmask;
	private News _escapedModel;

}